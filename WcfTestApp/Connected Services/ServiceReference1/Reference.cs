//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfTestApp.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMathservice")]
    public interface IMathservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Add", ReplyAction="http://tempuri.org/IMathservice/AddResponse")]
        int Add(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Add", ReplyAction="http://tempuri.org/IMathservice/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Subtract", ReplyAction="http://tempuri.org/IMathservice/SubtractResponse")]
        int Subtract(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Subtract", ReplyAction="http://tempuri.org/IMathservice/SubtractResponse")]
        System.Threading.Tasks.Task<int> SubtractAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Multiply", ReplyAction="http://tempuri.org/IMathservice/MultiplyResponse")]
        int Multiply(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Multiply", ReplyAction="http://tempuri.org/IMathservice/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Devide", ReplyAction="http://tempuri.org/IMathservice/DevideResponse")]
        int Devide(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathservice/Devide", ReplyAction="http://tempuri.org/IMathservice/DevideResponse")]
        System.Threading.Tasks.Task<int> DevideAsync(int num1, int num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathserviceChannel : WcfTestApp.ServiceReference1.IMathservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathserviceClient : System.ServiceModel.ClientBase<WcfTestApp.ServiceReference1.IMathservice>, WcfTestApp.ServiceReference1.IMathservice {
        
        public MathserviceClient() {
        }
        
        public MathserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int num1, int num2) {
            return base.Channel.Add(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int num1, int num2) {
            return base.Channel.AddAsync(num1, num2);
        }
        
        public int Subtract(int num1, int num2) {
            return base.Channel.Subtract(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> SubtractAsync(int num1, int num2) {
            return base.Channel.SubtractAsync(num1, num2);
        }
        
        public int Multiply(int num1, int num2) {
            return base.Channel.Multiply(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int num1, int num2) {
            return base.Channel.MultiplyAsync(num1, num2);
        }
        
        public int Devide(int num1, int num2) {
            return base.Channel.Devide(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> DevideAsync(int num1, int num2) {
            return base.Channel.DevideAsync(num1, num2);
        }
    }
}
